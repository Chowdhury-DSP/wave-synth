#pragma once

#include <pch.h>

struct Sallen_Key_Filter
{
    using Vec = xsimd::batch<float>;

    Sallen_Key_Filter() = default;

    void prepare (double sample_rate)
    {
        C1.prepare (static_cast<float> (sample_rate));
        C2.prepare (static_cast<float> (sample_rate));
    }

    void process (std::span<Vec> buffer)
    {
        auto res_val = 1.0f / (cap_val * juce::MathConstants<float>::twoPi * xsimd::load_aligned (cutoff_hz));
        Vin_R1.setResistanceValue (res_val);
        R2.setResistanceValue (res_val);

        const auto A_val = 3.0f - 1.0f / q_val;
        const auto R4_val = R3_val * (A_val - 1.0f);
        R4.setResistanceValue (R4_val);
        makeup = 1.0f / (1.0f + R4_val / R3_val);

        for (auto& x : buffer)
        {
            Vin_R1.setVoltage (x);
            R.compute();
            x = (wdft::voltage<Vec> (R3) - wdft::voltage<Vec> (R4)) * makeup;
        }
    }

    float q_val = 1.0f;
    alignas (16) float cutoff_hz[4] { 20'000.0f, 20'000.0f, 20'000.0f, 20'000.0f };

private:
    static constexpr auto cap_val = 1.0e-6f;
    static constexpr auto R3_val = 10.0e3f;

    // Port A
    wdft::ResistiveVoltageSourceT<Vec> Vin_R1 { 1.0e3f };

    // Port B
    wdft::ResistorT<Vec> R2 { 1.0e3f };

    // Port C
    wdft::CapacitorT<Vec> C2 { cap_val };

    // Port D
    wdft::ResistorT<Vec> R4 { 1.0e3f };

    // Port E
    wdft::ResistorT<Vec> R3 { R3_val };

    // Port F
    wdft::CapacitorT<Vec> C1 { cap_val };

    struct ImpedanceCalc
    {
        template <typename RType>
        static void calcImpedance (RType& R)
        {
            constexpr float Ag = 100.0f; // op-amp gain
            constexpr float Ri = 1.0e9f; // op-amp input impedance
            constexpr float Ro = 1.0e-1f; // op-amp output impedance
            const auto [Ra, Rb, Rc, Rd, Re, Rf] = R.getPortImpedances();

            R.setSMatrixData ({ { (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Ra * (-(Ag * (Rd + Re) * Rf * Ri) - (Re * Ri + Rd * (Re + Rf + Ri)) * Ro + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Ra * (Rd * Rf * (Re + Ri) + Rb * Rd * (Re + Rf + Ri) + Rb * Re * (Rf + Ri + Ag * Ri) + Rf * Ri * (Re + Ag * Re - Ro) - Rb * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Ra * (Rc * Re * Rf - Ag * Re * (Rb + Rf) * Ri + Rf * Ri * Ro + Rb * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Ra * (Ag * Rd * (Rb + Rf) * Ri + Rf * (Rd + Ri) * Ro + Rb * (Rf + Ri) * Ro + Rc * Rf * (-Rd + Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Ra * (Ag * Rb * (Rd + Re) * Ri - ((Rb + Rd) * Re + (Rd + Re) * Ri) * Ro + Rc * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro))) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) },
                                { (2 * Rb * (-((Re * Ri + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro - Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) + Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Ra * (Rd * Ri * Ro + Rf * Ri * Ro + Rd * Re * (-Rf + Ro) + Re * Ri * (-Rf + Ro) + Rd * Rf * ((-1 + Ag) * Ri + Ro) + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rb * Re * Rf * Ro - 2 * Ra * Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rb * (-(Ra * Re * (Rf + Ag * Ri)) + Ra * (Re + Rf + Ri) * Ro + Re * Rf * (-Rc + Ro))) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Rb * Rd * ((Ra + Rc) * Rf + Ag * Ra * Ri) + 2 * Rb * ((Rc + Rd) * Rf - Ra * Ri) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rb * (-(Rc * ((1 + Ag) * Re * Ri + Rd * (Re + Ri))) - Ra * (Rd * (Re + Ri - Ag * Ri) + Ri * (Re - Ro)) + Rc * (Re + Ri) * Ro + (Re * Ri + Rd * (Re + Ri)) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) },
                                { (-2 * Rc * (Rb * Rd * (Re + Rf + Ri) + Rd * Rf * (Re + Ri - Ag * Ri) + Rb * Re * (Rf + Ri + Ag * Ri) + Rf * Ri * (Re - Ro) - Rb * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rc * (Ag * (Rd + Re) * Rf * Ri + Ra * Rd * (Re + Rf + Ri) + Ra * Re * (Rf + Ri + Ag * Ri) - Re * Rf * Ro - Ra * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-(Rf * ((1 + Ag) * Rc * Re * Ri + Rc * Rd * (Re + Ri) + Re * Ri * Ro - Rc * (Re + Ri) * Ro + Rd * (Re + Ri) * Ro)) - Rb * (Rc * Rd * (Re + Rf + Ri) + Rc * Re * (Rf + Ri + Ag * Ri) + Re * (Rf + Ri) * Ro - Rc * (Re + Rf + Ri) * Ro + Rd * (Re + Rf + Ri) * Ro) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rc * (Ag * Re * (Rb + Rf) * Ri + Ra * Re * (Rf + Ag * Ri) - Ra * (Re + Rf + Ri) * Ro - (Rf * (Re + Ri) + Rb * (Re + Rf + Ri)) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rc * (Ra * Rd * Rf + Ag * Rd * (Ra + Rb + Rf) * Ri + Rb * Rf * Ro + (Ra + Rb + Rf) * Ri * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rc * (-(Ag * Rb * (Rd + Re) * Ri) + Ra * Rd * (Re + Ri - Ag * Ri) + Ra * Ri * (Re - Ro) + Rb * Re * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) },
                                { (-2 * Rd * (Rc * Rf * (Re - Ag * Ri) + Rf * Ri * Ro + Rb * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * (Ra + Rc) * Rd * Rf * (Re - Ag * Ri) + 2 * Rd * (Re * Rf + Ra * (Re + Rf + Ri)) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * Rd * (-(Ra * Re * Rf) + Ag * Ra * Rf * Ri + Rf * (Re + Ri) * Ro + Ra * (Re + Rf + Ri) * Ro + Rb * (Re + Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (Rf * (Re * Ri * Ro - Rd * (Re + Ri) * Ro + Rc * (-((1 + Ag) * Re * Ri) + Rd * (Re + Ri) + (Re + Ri) * Ro)) + Rb * (Re * (Rf + Ri) * Ro - Rd * (Re + Rf + Ri) * Ro + Rc * (Rd * (Re + Rf + Ri) - Re * (Rf + Ri + Ag * Ri) + (Re + Rf + Ri) * Ro)) + Ra * (-(Re * Rf * Ri) + Rd * Rf * (Re + Ri - Ag * Ri) + (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) - Re * (Rf + Ri + Ag * Ri) + (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) - Re * (Rf + Ri + Ag * Ri) + (Re + Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rd * (Rb * Rc * Rf + (1 + Ag) * Rc * (Rb + Rf) * Ri + Ra * (Rb * (Rf + Ri + Ag * Ri) + Rc * (Rf + Ri + Ag * Ri) + Ri * (Rf - Ro)) - (Rf * Ri + Rb * (Rf + Ri)) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rd * ((Rb * Rc + Ra * (Rb + Rc)) * (Re - Ag * Ri) - Rb * Re * Ro + Ra * Ri * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) },
                                { (2 * Re * (-(Rc * Rf * (Rd + Ag * Ri - Ro)) + Rf * (Rd + Ri) * Ro + Rb * (Rf + Ri) * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * (Ra + Rc) * Re * Rf * (Rd + Ag * Ri) + 2 * Re * ((Rc + Rd) * Rf - Ra * Ri) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Re * (Ra * Rd * Rf + Rf * Ri * Ro + Rb * (Rf + Ri) * Ro + Ra * Ri * (Ag * Rf + Ro))) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Re * ((Rf * Ri + Rb * (Rf + Ri)) * (Rc - Ro) + Ra * (Rb * (Rf + Ri) + Rc * (Rf + Ri) - Ri * ((-1 + Ag) * Rf + Ro)))) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-(Rf * (Rd * (Re - Ri) + Re * Ri) * Ro) - Rb * (Rd * (Re - Rf - Ri) + Re * (Rf + Ri)) * Ro + Rc * Rf * (Rd * (Re - Ri) + Re * (Ri + Ag * Ri - Ro) + Ri * Ro) + Rb * Rc * (Rd * (Re - Rf - Ri) + Re * (Rf + Ri + Ag * Ri - Ro) + (Rf + Ri) * Ro) + Ra * (Rc * Rd * (Re - Rf - Ri) + Rd * Re * (Rf - Ro) + Re * Ri * (Rf - Ro) + Rc * Re * (Rf + Ri + Ag * Ri - Ro) + Rd * Ri * Ro + Rf * Ri * Ro + Rc * (Rf + Ri) * Ro + Rd * Rf * ((-1 + Ag) * Ri + Ro) + Rb * (Rd * (Re - Rf - Ri) + Re * (Rf + Ri + Ag * Ri - Ro) + (Rf + Ri) * Ro))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * (Rb * Rc + Ra * (Rb + Rc)) * Re * (Rd + Ag * Ri) - 2 * Re * (Rb * (Rc + Rd) + Ra * (Rb + Rc + Rd + Ri)) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) },
                                { (-2 * Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) + 2 * Rf * ((Rb + Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (-2 * (Ra + Rc) * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) + 2 * Rf * ((Rc + Rd) * Re + (Ra + Rc + Rd + Re) * Ri) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rf * (Ra * Rd * (Re + Ri) + Ra * Ri * (Re + Ag * Re - Ro) + Rb * Re * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rf * (Ra * Re * (Rb + Rc - Ag * Ri) + Rb * Re * (Rc - Ro) + Ra * Ri * Ro)) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (2 * Rd * Rf * (Rb * Rc + Ra * (Rb + Rc - Ag * Ri)) - 2 * Rf * (Rb * (Rc + Rd) + Ra * (Rb + Rc + Rd + Ri)) * Ro) / (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * (-((Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro)) + Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))), (Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri)) - Rf * ((Rc + Rd) * Re + (Rc + Rd + Re) * Ri) * Ro + Rb * ((Re * (-Rf + Ri) + Rd * (Re - Rf + Ri)) * Ro - Rc * (Rd * (Re - Rf + Ri) + Re * (-Rf + Ri + Ag * Ri - Ro) + (Rf - Ri) * Ro)) + Ra * (Rd * Rf * (Re + Ri - Ag * Ri) + Rd * (Re - Rf + Ri) * Ro - Rb * (Rd * (Re - Rf + Ri) + Re * (-Rf + Ri + Ag * Ri - Ro) + (Rf - Ri) * Ro) - Rc * (Rd * (Re - Rf + Ri) + Re * (-Rf + Ri + Ag * Ri - Ro) + (Rf - Ri) * Ro) + Ri * (-(Rf * Ro) + Re * (Rf + Ro)))) / (Rf * (Re * Ri + Rd * (Re + Ri)) * Ro + Rb * (Re * (Rf + Ri) + Rd * (Re + Rf + Ri)) * Ro - Rc * Rf * ((1 + Ag) * Re * Ri + Rd * (Re + Ri) - (Re + Ri) * Ro) - Rb * Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) - Ra * (Re * Rf * Ri + Rd * Rf * (Re + Ri - Ag * Ri) - (Re + Rf) * Ri * Ro - Rd * (Re + Rf + Ri) * Ro + Rb * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro) + Rc * (Rd * (Re + Rf + Ri) + Re * (Rf + Ri + Ag * Ri) - (Re + Rf + Ri) * Ro))) } });
        }
    };

    using RType = wdft::RootRtypeAdaptor<Vec,
                                         ImpedanceCalc,
                                         decltype (Vin_R1),
                                         decltype (R2),
                                         decltype (C2),
                                         decltype (R4),
                                         decltype (R3),
                                         decltype (C1)>;
    RType R { Vin_R1, R2, C2, R4, R3, C1 };

    float makeup = 1.0f;
};
